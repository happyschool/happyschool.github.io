{
  "data": {
    "site": {
      "siteMetadata": { "title": "HappySchool", "author": "Peter Wang" }
    },
    "markdownRemark": {
      "id": "58c8a843-4e44-5075-bf33-934bf535be88",
      "html": "<p>Nervos CKB 是 Nervos 的第一层，是一条无需许可的公链，CKB 的测试网刚刚5月18号上线了。所以本期的快乐加密学院，咱们一起看看如何运行一个 CKB 的节点，然后进行挖矿获得奖励。操作会基于 MacOS 和官方提供的 Javascript 的 SDK 来进行，然后通过 CKB 的区块链浏览器来查看最终结果。</p>\n<h2 id=\"基本原理介绍\"><a href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本原理介绍</h2>\n<p>动手之前，先对各个组件和概念进行一下介绍。</p>\n<p>挖 CKB 之前，我得先有一个自己的 CKB 节点，那么什么叫一个节点，也就是 node 呢？答案其实很简单</p>\n<blockquote>\n<p>节点就是一个安装了 CKB 客户端的计算机</p>\n</blockquote>\n<p>稍后我会给大家演示怎么下载客户端并进行安装的。</p>\n<p>另外，什么是 CKB 的测试网呢？CKB 是一个区块链项目，所以基本结构是点对点的，这就意味着整个网络上没有服务器，所有的节点就组成了整个网络，各个节点间通过平等通信来达成对数据的共识，这样保证了整条区块链是可以被信赖的。测试网是区别于主网来说的，主要是用于测试目的。</p>\n<p><img src=\"https://happypeter.github.io/images/2019052402.jpg\"></p>\n<p>SDK 是一些方便我们跟 CKB 网络进行交互的代码。本期咱们会使用 Javascript 版本的 SDK 。所以最好你对 Nodejs 和 Javascript 要有基本的了解。如果你平常喜欢用其他语言开发的话，官方的文档网站上 <a href=\"https://docs.nervos.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nervos.org</a> 有其他语言的 SDK 的介绍。</p>\n<p>整个的过程是这样的。首先要搭建一个节点，然后使用 SDK 来生成自己的钱包，修改节点配置使用自己的钱包，这样挖矿奖励才能到自己手里。然后就开始挖矿过程，也就是用我的笔记本的算力去运算一个满足网络要求的哈希值，运算成功之后就相当于找到了当前 block 的 Seal 也就是封印。有了封印就成功制作了这个区块，也就可以把这个区块广播到全网获得挖矿奖励了。最后，可以到测试网的区块浏览器上去查看一下最终的结果，例如看看是不是地址上真正有了币。</p>\n<p><img src=\"https://happypeter.github.io/images/2019052403.jpg\"></p>\n<p>最后要提醒的是，测试网每两周就会重置一次，到时候所有的币也就都清空了。</p>\n<h2 id=\"运行一个节点\"><a href=\"#%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>运行一个节点</h2>\n<p>下面来搭建一下节点。</p>\n<p>首先，从官方的 Github 仓库，下载二进制包</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wget https://github.com/nervosnetwork/ckb/releases/download/v0.12.0/ckb_v0.12.0_darwin_amd64.zip</code></pre></div>\n<p>解压缩</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">unzip ckb_v0.12.0_darwin_amd64.zip\ncd ckb_v0.12.0_darwin_amd64</code></pre></div>\n<p>接下来把 ckb 变成一个系统命令。我们这里做的就是一个常见的 Unix 操作，创建了一个符号链接，不过如果你不理解什么是符号链接也没关系的，不影响后续的操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo ln -snf &quot;$(pwd)/ckb&quot; /usr/local/bin/ckb</code></pre></div>\n<p>到底这个命令是不是生效了呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ckb --version</code></pre></div>\n<p>可以看到输出的版本号即可。</p>\n<p>这样 CKB 客户端安装就成功了。接下来可以运行命令来生成测试网的配置文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ckb init -C ckb-testnet --spec testnet</code></pre></div>\n<p>创建一个文件夹叫 <code class=\"language-text\">ckb-testnet</code> ，里面保存了配置文件。</p>\n<p>进入这个文件夹，启动 CKB 。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ckb-testnet\nckb run</code></pre></div>\n<p>终端输出中可以看到正在从其他节点下载整条区块链，过程的确是需要一些时间的。区块链浏览器的首页 <a href=\"https://explorer.nervos.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://explorer.nervos.org/</a> 上可以看到最新的块高度，这样我们可以大概感觉出下载整条链需要多久。</p>\n<p>下载完毕之后，我们的节点就运行起来了，可以庆祝一下了。</p>\n<h2 id=\"使用自己的钱包\"><a href=\"#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E9%92%B1%E5%8C%85\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用自己的钱包</h2>\n<p>现在需要来生成自己的钱包，替换掉节点配置中默认的钱包，这样挖矿奖励才能到我们自己手里。</p>\n<p>首先要创建一个 Nodejs 的项目。注意，这个项目不是节点的一部分，我们只是用它来生成一下钱包。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node --version\nv10.10.0</code></pre></div>\n<p>代码里面会用到 async/await 这样的比较新的 Javascript 的功能，所以要确保 Nodejs 版本不能太老。我本地是10.10.0，你那边保证不低于这个版本就好了。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir gen-wallet\ncd gen-wallet\nnpm init -y</code></pre></div>\n<p>创建文件夹来存放这个项目，运行 <code class=\"language-text\">node init</code> 来创建 package.json 文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add @nervosnetwork/ckb-sdk-core</code></pre></div>\n<p>SDK 可以作为一个 npm 包来安装。</p>\n<p>下面创建一下 index.js 文件，里面的代码是从 SDK 仓库 <a href=\"https://github.com/nervosnetwork/ckb-sdk-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/nervosnetwork/ckb-sdk-js</a> 的 demo 里面摘出来的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">EC</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elliptic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ec\n<span class=\"token keyword\">const</span> Core <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@nervosnetwork/ckb-sdk-core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n<span class=\"token keyword\">const</span> Address <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@nervosnetwork/ckb-sdk-address'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n\n<span class=\"token keyword\">const</span> ec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EC</span><span class=\"token punctuation\">(</span><span class=\"token string\">'secp256k1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> privateKey <span class=\"token operator\">=</span> ec<span class=\"token punctuation\">.</span><span class=\"token function\">genKeyPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> prefix<span class=\"token punctuation\">:</span> <span class=\"token string\">'ckt'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'privateKey: '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0x'</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'address: '</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">const</span> nodeUrl <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_URL</span> <span class=\"token operator\">||</span> <span class=\"token string\">'http://localhost:8114'</span>\n\n<span class=\"token keyword\">const</span> core <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Core</span><span class=\"token punctuation\">(</span>nodeUrl<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> systemCellInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> core<span class=\"token punctuation\">.</span><span class=\"token function\">loadSystemCell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">SYSTEM_ENCRYPTION_CODE_HASH</span> <span class=\"token operator\">=</span> core<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span>paramsFormatter<span class=\"token punctuation\">.</span><span class=\"token function\">toHash</span><span class=\"token punctuation\">(</span>\n    systemCellInfo<span class=\"token punctuation\">.</span>codeHash\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> myAddressObj <span class=\"token operator\">=</span> core<span class=\"token punctuation\">.</span><span class=\"token function\">generateAddress</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> blake160edPublicKey <span class=\"token operator\">=</span> core<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">blake160</span><span class=\"token punctuation\">(</span>myAddressObj<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    codeHash<span class=\"token punctuation\">:</span> <span class=\"token constant\">SYSTEM_ENCRYPTION_CODE_HASH</span><span class=\"token punctuation\">,</span>\n    args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0x'</span> <span class=\"token operator\">+</span> blake160edPublicKey<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nscript: '</span><span class=\"token punctuation\">,</span> script<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>要生成新的钱包，运行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node index.js\n\nprivateKey:  0x25395da41ffb99c007ef1e0e2621381577faeeeec486d0943894bba0edacbaeb\naddress:  ckt1q9gry5zgckljj20cxh4k33ufu3q2kxxx2jv0cmk4ykgkhc\n\n\nscript:  { codeHash:\n   &#39;0x9e3b3557f11b2b3532ce352bfe8017e9fd11d154c4c7f9b7aaaa1e621b539a08&#39;,\n  args: [ &#39;0xc5bf2929f835eb68c789e440ab18c65498fc6ed5&#39; ] }</code></pre></div>\n<p>输出中的前两项就是钱包了，钱包就是一个公钥加一个私钥。下面的 script 这一项是钱包的另外一种形式，当前其中是不包含私钥的。可以用这些内容区替换 ckb.toml 中的对应内容。</p>\n<p>Ctrl-C 停下 ckb 进程，然后重启一下，就可以加载新的配置了。</p>\n<p>要进行挖矿，还要新开一个终端窗口，运行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ckb miner</code></pre></div>\n<p>这样就开始了挖矿。注意这里的输出，一般几分钟之后，就可以看到弹出了这样的信息</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2019-05-22 22:04:56.210 +08:00 main INFO miner  found seal: Seal { nonce: 12598543649063525489, proof: 0xf9030000ab350000ad3a0000ab4000007f4600001e4b00005d5200003e5b0000625d00003d6200001e6f000069780000 }</code></pre></div>\n<p>这就意味着找到 Seal 了，也就是找到了一个区块的封印了，这就意味着成功挖出了一个区块。</p>\n<p>可以到区块链浏览器 <a href=\"https://explorer.nervos.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://explorer.nervos.org</a> 中，搜索一下我的钱包地址，这样就可以看到是否收到奖励了。</p>\n<h2 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h2>\n<p>好，这就是本期的主体内容。咱们一起搭建了一个 CKB 的节点，然后挖出了区块。希望你能喜欢这个视频，我是 Peter ，咱们下次再见。</p>",
      "timeToRead": 3,
      "frontmatter": {
        "title": "Nervos CKB 挖矿教程",
        "date": "May 23, 2019",
        "spoiler": "Nervos CKB 是 Nervos 的第一层，是一条无需许可的公链，CKB 的测试网刚刚5月18号上线了。所以本期的快乐加密学院，咱们一起看看如何运行一个 CKB 的节点，然后进行挖矿获得奖励。操作会基于 MacOS 和官方提供的 Javascript 的 SDK 来进行，然后通过 CKB 的区块链浏览器来查看最终结果。",
        "plink": "https://happypeter.github.io/images/2019052401.jpg",
        "video": "https://www.bilibili.com/video/av53403812/"
      },
      "fields": { "slug": "/zh/007-ckb-mine/", "langKey": "zh" }
    }
  },
  "pageContext": {
    "slug": "/zh/007-ckb-mine/",
    "translations": ["zh"],
    "translatedLinks": []
  }
}
