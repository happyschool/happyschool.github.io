{"data":{"site":{"siteMetadata":{"title":"HappySchool","author":"Peter Wang"}},"markdownRemark":{"id":"ec681e00-22a2-5947-a281-d80b97170b00","html":"<p>Rust is a new programming language released on May 15th 2015, providing an alternative to C/C++, but also higher-level languages. So the obvious question is</p>\n<blockquote>\n<p>Why yet another programming language ?</p>\n</blockquote>\n<p>Now we are going to give the answer by showing rust’s true strengths.</p>\n<h2 id=\"its-fast\"><a href=\"#its-fast\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It’s Fast</h2>\n<p>If you are using some higher-level languages running on top of a abstraction layer, say Ruby or Python, you should try rust if you want your app to be more performant.\nRust is a compiled language, like C, it controls resource directly, that’s why Rust code runs very fast and is good for writing system software. A lot of blockchain projects are using Rust, because app written in Rust can be really performant, due to Rust’s ability to fully control the hardware.</p>\n<p><img src=\"https://img.haoqicat.com/2019041203.jpg\"></p>\n<p>Rust offers zero-cost abstraction. Rust has a lot of sweet high level language features over some abstractions. But Rust is carefully designed, so that all these abstractions are at no cost. The compiler will take care of them, and no runtime or garbage collector is required to support these abstractions.</p>\n<p><img src=\"https://img.haoqicat.com/2019041204.jpg\"></p>\n<p>Rust plays well with other languages. Rust interfaces to other languages through the C ABI at zero cost. you can use C library in Rust Code, or use Rust library in C code.</p>\n<p>Now let’s understand the Rust way with a demo. Ruby language has a method named <code class=\"language-text\">blank</code>, which is used to check if a string is blank. The ruby implementation is like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">def</span> blank<span class=\"token operator\">?</span>\n  <span class=\"token operator\">/</span>\\<span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:space</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\z<span class=\"token operator\">/</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">self</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Looks simple, but performance is not so good, 964K iteration/sec.</p>\n<p>So some <a href=\"https://github.com/SamSaffron/fast_blank\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cool dude</a> developed a fast blank with C.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby/encoding.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby/re.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby/version.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STR_ENC_GET(str) rb_enc_from_index(ENCODING_GET(str))</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> RUBY_API_VERSION_CODE</span>\n<span class=\"token macro property\"># <span class=\"token directive keyword\">define</span> ruby_version_before_2_2() 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"># <span class=\"token directive keyword\">define</span> ruby_version_before_2_2() (RUBY_API_VERSION_CODE &lt; 20200)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">static</span> VALUE\n<span class=\"token function\">rb_str_blank_as</span><span class=\"token punctuation\">(</span>VALUE str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  rb_encoding <span class=\"token operator\">*</span>enc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n\n  enc <span class=\"token operator\">=</span> <span class=\"token function\">STR_ENC_GET</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  s <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_PTR</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s <span class=\"token operator\">||</span> <span class=\"token function\">RSTRING_LEN</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n\n  e <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_END</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cc <span class=\"token operator\">=</span> <span class=\"token function\">rb_enc_codepoint_len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xa</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xb</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xd</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x85</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xa0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x1680</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2000</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2001</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2002</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2003</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2004</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2005</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2006</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2007</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2008</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2009</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x200a</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2028</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2029</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x202f</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x205f</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x3000</span><span class=\"token punctuation\">:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> ruby_version_before_2_2()</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x180e</span><span class=\"token punctuation\">:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n          <span class=\"token comment\">/* found */</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> Qfalse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> VALUE\n<span class=\"token function\">rb_str_blank</span><span class=\"token punctuation\">(</span>VALUE str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  rb_encoding <span class=\"token operator\">*</span>enc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n\n  enc <span class=\"token operator\">=</span> <span class=\"token function\">STR_ENC_GET</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  s <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_PTR</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s <span class=\"token operator\">||</span> <span class=\"token function\">RSTRING_LEN</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n\n  e <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_END</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cc <span class=\"token operator\">=</span> <span class=\"token function\">rb_enc_codepoint_len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">rb_isspace</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cc <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qfalse<span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Init_fast_blank</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">rb_define_method</span><span class=\"token punctuation\">(</span>rb_cString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blank?\"</span><span class=\"token punctuation\">,</span> rb_str_blank<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rb_define_method</span><span class=\"token punctuation\">(</span>rb_cString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blank_as?\"</span><span class=\"token punctuation\">,</span> rb_str_blank_as<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is ten times more performant, 10.5M iter/sec. But looking at the code, we know it’s not esay to do it right in C, there are lots of things you need to keep in mind.</p>\n<p>But finally let’s look the implementation in Rust.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">exten <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">fast_blank</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">:</span> Buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> bool <span class=\"token punctuation\">{</span>\n  buf<span class=\"token punctuation\">.</span><span class=\"token function\">as_slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>c<span class=\"token operator\">|</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">is_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Much simpler code, thanks to Rust’s higher level language features. And it’s as performant, 11M iter/sec.</p>\n<p>So we can see Rust is really fast, because of its zero-cost abstraction.</p>\n<h2 id=\"its-safe\"><a href=\"#its-safe\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It’s safe</h2>\n<p>To those who is using C/C++ and already have full control of the hardware, you still should try rust if you want to be a more efficient developer. Rust offers safety guarantees, that makes development so much easier.</p>\n<p>C/C++ offer great power, but also expose us in front of lots of risks. C can implement extraordinary performance but with lower abstraction and results in human mistakes easily. Like C, C++ can be really unforgiving, even if there is some small mistake, you will get a runtime crash if you are lucky, otherwise you might be trapped in a very unclear situation. If you are using C/C++, You need to worry about the hardware machine, while you are implementing your features, double effort, one output. This was exactly how I felt, when I was a full time C++ dev as my first job.</p>\n<p><img src=\"https://img.haoqicat.com/2019041205.jpg\"></p>\n<p>However, Rust gives us strong safety guarantees. No segment fault, no run time crash, no dangling pointers, no out-of-bound accesses. and data race free. Rust achieves this by certain language features and good compiler support. If ever you do some thing wrong, the compiler will tell you about it.</p>\n<p>Hack without fear is Rust’s slogan. You do not worry about your program once the compilation is complete.</p>\n<h2 id=\"its-ergonomic\"><a href=\"#its-ergonomic\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It’s ergonomic</h2>\n<p>A lot of people love Ruby, cause it</p>\n<blockquote>\n<p>Optimize for Programmer Happiness.</p>\n</blockquote>\n<p>Rust also wants the developers to be happier and try its best to be ergonomic.</p>\n<p><img src=\"https://img.haoqicat.com/2019041206.jpg\"></p>\n<p>Rust supports multiple programming paradigms, like generic, imperative, structured. It is also inspired by Haskell, you can do functional programming with rust. You can explicitly define a variable to be mutable, but by default, everything is immutable. That sort of sweetness is not sth C/C++ offers.</p>\n<p><img src=\"https://img.haoqicat.com/2019041207.jpg\"></p>\n<p>Rust has great tooling. It has a npm like system that you can get the ready-made code as packages. Tools are available to take care of your dependency management. Rust also has great build system, that means no more hand made Makefiles.</p>\n<p>Great community. Rust is from Mozilla, but more than 4/5 of contributions come from outside Mozilla. Rust compiler has more than 2000 contributors. Dropbox and Canonical,that is the company behind Ubuntu, and other companies are using Rust. Firefox is porting its core components from C++ to Rust. Rust is a true community thing, if you know what I am saying.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Rust preserves the conveniences of high-level languages in low-level land. It’s as fast as C/C++, and as safe and easy to use as higher-level languages like Python/Ruby or Haskell. That’s why lots of peope move to rust land from the higher or lower world.</p>\n<p>That’s all for this episode, if want some discussion, I am happypeter1983 on twitter.</p>\n<p>Ref:</p>\n<ul>\n<li><a href=\"https://medium.com/@Aimeedeer/why-rust-c877fba0ca94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@Aimeedeer/why-rust-c877fba0ca94</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cDFSrVhnZKo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=cDFSrVhnZKo</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_jMSrMex6R0&#x26;t=677s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=_jMSrMex6R0&#x26;t=677s</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-Tj8Q12DaEQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=-Tj8Q12DaEQ</a></li>\n<li><a href=\"http://intorust.com/tutorial/why-rust/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://intorust.com/tutorial/why-rust/</a></li>\n</ul>","timeToRead":5,"frontmatter":{"title":"Why Rust?","date":"April 11, 2019","spoiler":"Rust is a new language released in 2015, as an alternative for C/C++, or other higher-level languages. Why yet another programming language? Let's explore its strengths now.","plink":"https://img.haoqicat.com/2019041201.jpg","video":"https://youtu.be/AMt-whOk6Mk"},"fields":{"slug":"/001-rust/","langKey":"en"}}},"pageContext":{"slug":"/001-rust/","previous":null,"next":{"fields":{"slug":"/002-state/","langKey":"en","directoryName":"002-state","maybeAbsoluteLinks":["/yes/"]},"frontmatter":{"title":"Blockchain State Explosion"}},"translations":["zh"],"translatedLinks":[]}}