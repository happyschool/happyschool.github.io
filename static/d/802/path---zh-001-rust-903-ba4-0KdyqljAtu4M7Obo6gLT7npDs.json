{
  "data": {
    "site": {
      "siteMetadata": { "title": "HappySchool", "author": "Peter Wang" }
    },
    "markdownRemark": {
      "id": "5bbca8d2-a901-5d8f-b77f-aac391dd8762",
      "html": "<p>Rust 是一种2015年发布的新的编程语言，可以作为 C/C++ 或者一些更上层语言的替代品。你可能首先要问的一个问题是</p>\n<blockquote>\n<p>为啥又要发明一种语言呢？</p>\n</blockquote>\n<p>本文中我们来一起看看 Rust 到底强在哪里？</p>\n<h2 id=\"快\"><a href=\"#%E5%BF%AB\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>快</h2>\n<p>如果你目前使用的语言是类似 Ruby、Python 这样的较高层级语言，那可以试试 Rust ，因为 Rust 写出来的程序真的性能非常棒。</p>\n<p>Rust 是一种编译型语言，类似 C ，可以对硬件进行直接的操作，所以执行起来会非常省资源并且非常快。Rust 非常适合写一些系统软件，换句话说就是写一些底层软件。所以在区块链圈子中，Rust 非常的流行，诸如 Grin 和 Nervos 这样的项目都在使用 Rust 。</p>\n<p>Rust 遵从“零成本抽象”。Rust 提供了一些抽象，不然就不能提供出那些更高层级的语言才有的好用的语言特性。但是 Rust 的设计是非常巧妙的，会保证这些抽象是零成本的，也就是所有的抽象都会在编译过程中被处理，真正执行的时候是不依赖 Garbage Collector 或者其他的运行时的，也就避免了消耗资源。</p>\n<p><img src=\"https://happypeter.github.io/images/2019041203.jpg\"></p>\n<p>Rust 跟其他的语言也能非常无缝的融合。Rust 可以通过 C ABI 的形式来跟其他语言实现零成本的对接。Rust 中可以使用 C 库，C 代码中也能直接使用 Rust 库。</p>\n<p><img src=\"https://happypeter.github.io/images/2019041204.jpg\"></p>\n<p>下面来观察一个<a href=\"http://intorust.com/tutorial/why-rust/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">例子</a>，体会一下 Rust 的做事风格。Ruby 语言有一个方法叫做 blank ，用来做字符串是否为空的检查。Ruby 的实现是这样的。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">def</span> blank<span class=\"token operator\">?</span>\n    <span class=\"token operator\">/</span>\\<span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:space</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\z<span class=\"token operator\">/</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">self</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>代码是非常简单的，但是性能可不怎么样，每秒迭代次数为 964K 。</p>\n<p>于是有<a href=\"https://github.com/SamSaffron/fast_blank\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">高手</a>使用 C 语言开发了一个高性能的版本</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby/encoding.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby/re.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ruby/version.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STR_ENC_GET(str) rb_enc_from_index(ENCODING_GET(str))</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> RUBY_API_VERSION_CODE</span>\n<span class=\"token macro property\"># <span class=\"token directive keyword\">define</span> ruby_version_before_2_2() 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\"># <span class=\"token directive keyword\">define</span> ruby_version_before_2_2() (RUBY_API_VERSION_CODE &lt; 20200)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">static</span> VALUE\n<span class=\"token function\">rb_str_blank_as</span><span class=\"token punctuation\">(</span>VALUE str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  rb_encoding <span class=\"token operator\">*</span>enc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n\n  enc <span class=\"token operator\">=</span> <span class=\"token function\">STR_ENC_GET</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  s <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_PTR</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s <span class=\"token operator\">||</span> <span class=\"token function\">RSTRING_LEN</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n\n  e <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_END</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cc <span class=\"token operator\">=</span> <span class=\"token function\">rb_enc_codepoint_len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xa</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xb</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xd</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x85</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0xa0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x1680</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2000</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2001</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2002</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2003</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2004</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2005</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2006</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2007</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2008</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2009</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x200a</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2028</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x2029</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x202f</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x205f</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x3000</span><span class=\"token punctuation\">:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> ruby_version_before_2_2()</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0x180e</span><span class=\"token punctuation\">:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n          <span class=\"token comment\">/* found */</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> Qfalse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> VALUE\n<span class=\"token function\">rb_str_blank</span><span class=\"token punctuation\">(</span>VALUE str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  rb_encoding <span class=\"token operator\">*</span>enc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n\n  enc <span class=\"token operator\">=</span> <span class=\"token function\">STR_ENC_GET</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  s <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_PTR</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s <span class=\"token operator\">||</span> <span class=\"token function\">RSTRING_LEN</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n\n  e <span class=\"token operator\">=</span> <span class=\"token function\">RSTRING_END</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cc <span class=\"token operator\">=</span> <span class=\"token function\">rb_enc_codepoint_len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">rb_isspace</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cc <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qfalse<span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Qtrue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Init_fast_blank</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">rb_define_method</span><span class=\"token punctuation\">(</span>rb_cString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blank?\"</span><span class=\"token punctuation\">,</span> rb_str_blank<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rb_define_method</span><span class=\"token punctuation\">(</span>rb_cString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blank_as?\"</span><span class=\"token punctuation\">,</span> rb_str_blank_as<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>性能提升了十倍还多，每秒迭代次数 10.5M ，但是写代码的时候要操多少心，看看上面的代码就知道了。</p>\n<p>下面看看 Rust 的版本</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">exten <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">fast_blank</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">:</span> Buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> bool <span class=\"token punctuation\">{</span>\n  buf<span class=\"token punctuation\">.</span><span class=\"token function\">as_slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>c<span class=\"token operator\">|</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">is_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>代码简单，执行效率比 C 的甚至还略快一点，每秒 11M 次迭代。</p>\n<p>总之，Rust 非常的快，因为它的抽象都是零成本的，本质上是跟 C 一样的相对低层级的语言。</p>\n<h2 id=\"安全\"><a href=\"#%E5%AE%89%E5%85%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安全</h2>\n<p>如果你平常使用的是 C/C++ 这些相对低层级的语言，那么对硬件的控制能力就已经很充分了，但是 Rust 依然可能对你很有吸引力，因为 Rust 提供默认的安全保证，可以让开发变得容易，让你成为一个效率更高的开发者。</p>\n<p>C/C++ 提供了极高的灵活性，但是同时也让开发者面对各种的风险。C 语言可以实现非常高的性能，但是由于没有抽象层的保护，开发者很容易就会写出 Bug 。C++ 也类似，对开发者容忍度很低，一个很小的疏忽，就可能导致程序崩溃，其实崩溃还是幸运的，有时候会出现很低难以复现的诡异情况。Peter 自己第一份工作就是全职 C++ 开发者，感觉既要实现业务逻辑，还要同时讨好硬件，双份劳动，一份产出。后来切换到 Ruby 和 Python 这些高层级语言后，就只需要关注业务逻辑即可。</p>\n<p><img src=\"https://happypeter.github.io/images/2019041205.jpg\"></p>\n<p>但是 Rust 真的很不一样，Rust 提供了很强的安全保证。使用 Rust 写的代码，运行的时候不会出现各种硬件安全问题，例如段错误，运行时崩溃，野指针，越界资源调用，或者 data race 。那么这是如何做到的呢？Rust 通过一定的语言层面的规定和强大的编译器支持来避免上面的情况。如果你是新手程序员，犯了这些错误，编译的时候，编译器会告诉你存在的问题，而不会在程序运行的时候出现各种诡异的没有报错的状况。</p>\n<p>Rust 有句口号是：Hack without fear 。只要程序编译是通过的，我们就不用再为程序的各种安全问题担心了。</p>\n<h2 id=\"人体工学\"><a href=\"#%E4%BA%BA%E4%BD%93%E5%B7%A5%E5%AD%A6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>人体工学</h2>\n<p>很多人喜欢 Ruby 语言，因为它</p>\n<blockquote>\n<p>为程序员的快乐而优化</p>\n</blockquote>\n<p>而到了 Rust 社区，经常会被提到的一个词就是“人体工学”，这是跟 Ruby 追求的目标一致的，也就是让开发过程变得舒服。</p>\n<p><img src=\"https://happypeter.github.io/images/2019041206.jpg\"></p>\n<p>Rust 是支持多种开发范式的，例如，generic, imperative, structured 等。同时借鉴 Haskell 等函数式语言，Rust 也对函数式编程有很好的支持。Rust 里面的变量默认就是 immutable 的，也就是拥有“不变性”的。这样的功能可不是 C/C++ 可以提供的，支持多范式，Peter 不确定是不是属于人体工学，但是不支持函数式编程的语言，用起来怎么可能 Happy 呢。</p>\n<p><img src=\"https://happypeter.github.io/images/2019041207.jpg\"></p>\n<p>Rust 的工具生态也非常的好。Rust 有自己的包管理系统，跟 npm 类似，可以很方便的下载到需要的包，并进行依赖管理。编译系统也很完善，不需要手动去写 Makefile 了。</p>\n<p>Rust 所有的贴心都来自于真正活跃的社区。Rust 是由 Mozilla 发起的项目，但是 80% 的贡献是来自 Mozilla 之外的，可见 Rust 是一个真正属于社区的语言，对于很多人来说，使用的语言不被单一公司把持是至关重要的。</p>\n<p>Rust 不仅仅关注执行效率，也关爱开发者，注意提高开发者的效率以及幸福度。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>最后总结一下吧。Rust 在一个较低的层级上实现了各种高层级语言才有的方便特性。它和较低层级语言，例如 C/C++ 一样，高性能，同时又跟那些带有运行负担的较高层级语言，例如 Ruby/Python 或者 Haskell 一样，拥有自带的安全性和易用性。这就是为何很多人分别从更高或者更低层级的语言，切换到 Rust 的原因。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://medium.com/@Aimeedeer/why-rust-c877fba0ca94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@Aimeedeer/why-rust-c877fba0ca94</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cDFSrVhnZKo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=cDFSrVhnZKo</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_jMSrMex6R0&#x26;t=677s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=_jMSrMex6R0&#x26;t=677s</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-Tj8Q12DaEQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=-Tj8Q12DaEQ</a></li>\n<li><a href=\"http://intorust.com/tutorial/why-rust/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://intorust.com/tutorial/why-rust/</a></li>\n</ul>",
      "timeToRead": 3,
      "frontmatter": {
        "title": "为何使用 Rust 语言？",
        "date": "April 11, 2019",
        "spoiler": "Rust 是一个相对比较新的语言，2015年才正式发布，目的在于替代 C/C++ 以及其他更高层级的语言，我们首先要问的是，为何又要发明一门新的语言呢？这里来给出答案。",
        "plink": "https://happypeter.github.io/images/2019041201.jpg",
        "video": "https://www.bilibili.com/video/av48984844/"
      },
      "fields": { "slug": "/zh/001-rust/", "langKey": "zh" }
    }
  },
  "pageContext": {
    "slug": "/zh/001-rust/",
    "translations": ["zh"],
    "translatedLinks": []
  }
}
